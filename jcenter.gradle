// plugins {
//     id "com.github.dcendents.android-maven" version "1.4.1"  // https://github.com/dcendents/android-maven-gradle-plugin
//     id "com.jfrog.bintray" version "1.7.3"                   // https://github.com/bintray/gradle-bintray-plugin
// }


def configFile = rootProject.file("jcenter.properties")
if (!configFile.exists()) {
    throw new IllegalArgumentException("Can not find '${configFile}'")
}
def config = new Properties()
config.load(configFile.newDataInputStream())

// Maven Information
def __MAVEN_USER = getProp(config, 'MAVEN_USER')
def __MAVEN_KEY = getProp(config, 'MAVEN_KEY')
def __MAVEN_ORGAN = getProp(config, 'MAVEN_ORGAN')
def __MAVEN_REPO = getProp(config, 'MAVEN_REPO')
def __LICENSES = getProp(config, 'LICENSES')
// Artifact Information
def __ARTIFACT_GROUP = getProp(config, 'ARTIFACT_GROUP')
def __ARTIFACT_NAME = getProp(config, 'ARTIFACT_NAME')
def __ARTIFACT_OVERRIDE = Boolean.valueOf(getProp(config, 'ARTIFACT_OVERRIDE'))
// User Information
def __MY_ID = getProp(config, 'MY_ID')
def __MY_NAME = getProp(config, 'MY_NAME')
def __MY_EMAIL = getProp(config, 'MY_EMAIL')
// Project Information
def __HOME_URL = getProp(config, 'HOME_URL')
def __VCS_URL = getProp(config, 'VCS_URL')


apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'


task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}
task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))

    failOnError false
}
javadoc {
    options {
        encoding "UTF-8"
        charSet 'UTF-8'
        author true
        version true
        links "http://docs.oracle.com/javase/8/docs/api"
        title __ARTIFACT_NAME
    }
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
artifacts {
    archives javadocJar
    archives sourcesJar
}

group = __ARTIFACT_GROUP
version = android.defaultConfig.versionName
archivesBaseName = __ARTIFACT_NAME
install {
    repositories.mavenInstaller {
        pom {
            project {
                packaging 'aar'
                url __VCS_URL
                developers {
                    developer {
                        id __MY_ID
                        name __MY_NAME
                        email __MY_EMAIL
                    }
                }
            }
        }
    }
}
bintray {
    user = __MAVEN_USER
    key = __MAVEN_KEY

    configurations = ['archives']
    publish = true
    override = __ARTIFACT_OVERRIDE

    pkg {
        userOrg = __MAVEN_ORGAN
        repo = __MAVEN_REPO
        name = __ARTIFACT_NAME
        websiteUrl = __HOME_URL
        vcsUrl = __VCS_URL
        licenses = [__LICENSES]
    }
}


def getProp(properties, key) {
    properties.getProperty(key) != null ? properties.getProperty(key)
            : hasProperty(key) ? getProperty(key)
            : System.getenv(key)
}
